{"version":3,"sources":["components/Header.js","components/Instructions.js","components/ImgCard.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","score","Instructions","ImgCard","onClick","clickBox","id","alt","name","src","image","App","state","imglist","guessed","randomizeImg","temporaryValue","randomIndex","newArr","_this","currentIndex","length","Math","floor","random","setState","resetGame","currguessed","indexOf","push","alert","_this2","this","components_Header","components_Instructions","map","img","components_ImgCard","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ozBAkBeA,MAff,SAAgBC,GACd,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UAChBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,0BAEFF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,2BAAmBH,EAAMK,iBCCpBC,MATf,WACE,OACEL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,4CACAF,EAAAC,EAAAC,cAAA,kDCISI,MARf,SAAiBP,GACf,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAUI,QAAS,kBAAMR,EAAMS,SAAST,EAAMU,MAC3DT,EAAAC,EAAAC,cAAA,OAAKQ,IAAKX,EAAMY,KAAMC,IAAKb,EAAMc,iBC2GxBC,6MAxGbC,MAAQ,CACNC,QAASA,EACTC,QAAS,GACTb,MAAO,KAOTc,aAAe,WAOb,IANA,IAEEC,EACAC,EAHEC,EAASC,EAAKP,MAAMC,QACpBO,EAAeF,EAAOG,OAKnB,IAAMD,GAEXH,EAAcK,KAAKC,MAAMD,KAAKE,SAAWJ,GAIzCJ,EAAiBE,EAHjBE,GAAgB,GAIhBF,EAAOE,GAAgBF,EAAOD,GAC9BC,EAAOD,GAAeD,EAGxBG,EAAKM,SAAS,CACZZ,QAASK,OAUbQ,UAAY,WACVP,EAAKM,SAAS,CACZZ,QAASA,EACTC,QAAS,GACTb,MAAO,OAWXI,SAAW,SAAAC,GACT,IAAIqB,EAAcR,EAAKP,MAAME,QACzBb,EAAQkB,EAAKP,MAAMX,OAEU,IAA7B0B,EAAYC,QAAQtB,IACtBqB,EAAYE,KAAKvB,GACjBL,IAEAkB,EAAKM,SAAS,CACZX,QAASa,EACT1B,MAAOA,IAGTkB,EAAKJ,iBAELe,MAAM,sBAENX,EAAKO,sFAUA,IAAAK,EAAAC,KACP,OACEnC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACkC,EAAD,CAAQhC,MAAO+B,KAAKpB,MAAMX,QAC1BJ,EAAAC,EAAAC,cAACmC,EAAD,MACArC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACZgC,KAAKpB,MAAMC,QAAQsB,IAAI,SAAAC,GAAG,OACzBvC,EAAAC,EAAAC,cAACsC,EAAD,CACE/B,GAAI8B,EAAI9B,GACRgC,IAAKF,EAAI9B,GACTE,KAAM4B,EAAI5B,KACVE,MAAO0B,EAAI1B,MACXL,SAAU0B,EAAK1B,uBA/FbkC,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjD,EAAAC,EAAAC,cAACgD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.aa6e3e95.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./css/Header.css\";\n\nfunction Header(props) {\n  return (\n    <div className=\"headerwrap\">\n      <header className=\"Header\">\n        <div className=\"Title\">\n          <h2>Clicky Game</h2>\n        </div>\n        <div className=\"score\">\n          <p>Current Score: {props.score}</p>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\nimport \"./css/Instructions.css\";\n\nfunction Instructions() {\n  return (\n    <div className=\"InstructionsBox\">\n      <h1>Click an image to earn points.</h1>\n      <h2> Only click each image once!</h2>\n    </div>\n  );\n}\n\nexport default Instructions;\n","import React from \"react\";\nimport \"./css/ImgCard.css\";\n\nfunction ImgCard(props) {\n  return (\n    <div className=\"imgcard\" onClick={() => props.clickBox(props.id)}>\n      <img alt={props.name} src={props.image} />\n    </div>\n  );\n}\n\nexport default ImgCard;\n","import React, { Component } from \"react\";\n\nimport \"./App.css\";\nimport Header from \"./components/Header\";\nimport Instructions from \"./components/Instructions\";\nimport ImgCard from \"./components/ImgCard\";\nimport imglist from \"./components/img.json\";\n\nclass App extends Component {\n  state = {\n    imglist: imglist,\n    guessed: [],\n    score: 0\n  };\n\n  /**\n   * Random sort function. Taken from an answer on stack overflow by the community wiki\n   * https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array#2450976\n   */\n  randomizeImg = () => {\n    let newArr = this.state.imglist;\n    var currentIndex = newArr.length,\n      temporaryValue,\n      randomIndex;\n\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n\n      // And swap it with the current element.\n      temporaryValue = newArr[currentIndex];\n      newArr[currentIndex] = newArr[randomIndex];\n      newArr[randomIndex] = temporaryValue;\n    }\n\n    this.setState({\n      imglist: newArr\n    });\n  };\n\n  /**\n   * Removes all points and clicked boxes, resetting the game back to its original state\n   * imglist: the list of images to click from\n   * guessed: the array of clicked IDs\n   * score: the number of boxes clicked without repeats\n   */\n  resetGame = () => {\n    this.setState({\n      imglist: imglist,\n      guessed: [],\n      score: 0\n    });\n  };\n\n  /**\n   * When a box is clicked, check the ID against the array of clicked\n   * IDs (this.state.guessed). If the box has not been clicked, log\n   * it and update the score.\n   *\n   * If the box has been clicked, alert the player and reset the game.\n   */\n  clickBox = id => {\n    let currguessed = this.state.guessed;\n    let score = this.state.score;\n\n    if (currguessed.indexOf(id) === -1) {\n      currguessed.push(id);\n      score++;\n\n      this.setState({\n        guessed: currguessed,\n        score: score\n      });\n\n      this.randomizeImg();\n    } else {\n      alert(\"Too bad! You lose!\");\n\n      this.resetGame();\n    }\n  };\n\n  /**\n   * Render the page to be shown. Include:\n   *  the header, with the current score\n   *  the instructions for how to play\n   *  a loop through the image list, mapping each image onto the page\n   */\n  render() {\n    return (\n      <div className=\"App\">\n        <Header score={this.state.score} />\n        <Instructions />\n        <div className=\"contentbackground\">\n          <div className=\"imgwrap\">\n            {this.state.imglist.map(img => (\n              <ImgCard\n                id={img.id}\n                key={img.id}\n                name={img.name}\n                image={img.image}\n                clickBox={this.clickBox}\n              />\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}